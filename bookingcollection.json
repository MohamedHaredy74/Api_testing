{
	"info": {
		"_postman_id": "ee22dc10-54e5-4ed1-9b19-ce1a4465c35b",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24377430"
	},
	"item": [
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let Data=pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"Token\",Data.accessToken);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"{{$randomFullName}}\",\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking_url}}//api-clients",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"",
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "getstatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"console.log(response.status)\r",
							"\r",
							"pm.test(\"status is OK\", () =>{\r",
							"    pm.expect(response.status).to.eql(\"OK\");\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking_url}}/status",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "AllBooks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response =pm.response.json();\r",
							"const fictionBooks=response.filter((book) => book.type===\"fiction\");\r",
							"const availablegoooks=response.filter((book) => book.available===true);\r",
							"const fictionBook=(fictionBooks[0]);\r",
							"pm.collectionVariables.set(\"bookid\",fictionBooks[0].id);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log('avaialble books are :',availablegoooks);\r",
							"console.log('fiction books are : ',fictionBooks);\r",
							"\r",
							"//postman.setNextRequest(null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking_url}}/books",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "fiction",
							"disabled": true
						},
						{
							"key": "available",
							"value": "true",
							"disabled": true
						},
						{
							"key": "limit",
							"value": "2",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getBookid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response=pm.response.json();\r",
							"//Assert if \"curent-stock\"> 10\r",
							"pm.test('Current-stock > 10',()=> {\r",
							"    pm.expect(response[\"current-stock\"]).to.be.above(10);\r",
							"});\r",
							"//assert if the book is found or not \r",
							"pm.test(\"Book is found \",()=> {\r",
							"    pm.expect(response).to.be.an('object');\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking_url}}/books/:bookId",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"books",
						":bookId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "orderabook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.collectionVariables.set(\"randomNumber\", _.random(1,6));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status('Created');\r",
							"});\r",
							"let response=pm.response.json();\r",
							"pm.collectionVariables.set(\"orderId\", response.orderId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\":{{bookid}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking_url}}/orders",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response =pm.response.json();\r",
							"\r",
							"let id=pm.collectionVariables.get(\"orderId\");\r",
							"pm.test('id is eql to orderId',()=>{\r",
							"    pm.expect(response.id).to.eql(id);\r",
							"})\r",
							"console.log(response);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking_url}}/orders/:id",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking_url}}/orders/{{orderId}}",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"    pm.response.to.have.status('No Content');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{booking_url}}/orders/:id",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const id=pm.collectionVariables.get('orderId');\r",
							"const response=pm.response.json();\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    pm.response.to.have.status('Not Found');\r",
							"});\r",
							"\r",
							"pm.test('erro with no order with order id',()=> {\r",
							"    pm.expect(response.error).to.eql('No order with id '+id+'.');\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking_url}}/orders/:id",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", ()=> {\r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking_url}}/orders",
					"host": [
						"{{booking_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eb9f1fbd32853bfc2b0fdac6e46c747af0c9e48a36147edff3cf425a0b126b73",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "booking_url",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		}
	]
}